{
    "compilerOptions": {
        // 目标代码转化 esnext：所指的都是es6以后的版本
        "target": "esnext",
        // 目标代码需要使用的模块化方案 umd：支持多种模块化
        "module": "esnext",
        // 严格模式的检查（any）
        "strict": true,
        // 对jsx的处理
        "jsx": "preserve",
        // 辅助的导入功能
        "importHelpers": true,
        // 按照node的方式解析模块 模块后缀的检测方式（import /index.node）
        "moduleResolution": "node",
        // 跳过一些库的类型检测（axios lodash -> @type/lodash）
        "skipLibCheck": true,
        // es模块化语法 和 commonjs 混合使用
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "resolveJsonModule": true,
        // 是否生成映射文件
        "sourceMap": true,
        // 文件路径在解析时 基本的URL，例如在项目中引用一个文件，一般是基于当前文件的路径
        "baseUrl": ".",
        // 具体要解析使用的类型
        "types": ["webpack-env"],
        // 路径解析
        "paths": {
            "@/*": ["src/*"],
            "components/": ["src/components/*"]
        },
        // 可以再项目中指定要使用库的类型
        "lib": ["esnext", "dom", "dom.iterable", "scripthost"],
        "forceConsistentCasingInFileNames": true // 减少在不同操作系统（如 Windows 和 macOS/Linux）之间工作时因文件名大小写不一致而引发的问题。
    },
    "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue", "tests/**/*.ts", "tests/**/*.tsx"],
    "exclude": ["node_modules"]
}
